{"version":3,"sources":["./src/app/notification-and-language-setting/notification-and-language-setting.module.ts","./src/app/notification-and-language-setting/notification-and-language-setting.page.html","./src/app/notification-and-language-setting/notification-and-language-setting-routing.module.ts","./src/app/notification-and-language-setting/notification-and-language-setting.page.scss","./src/app/notification-and-language-setting/notification-and-language-setting.page.ts"],"names":[],"mappings":"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","file":"notification-and-language-setting-notification-and-language-setting-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { NotificationAndLanguageSettingPageRoutingModule } from './notification-and-language-setting-routing.module';\n\nimport { NotificationAndLanguageSettingPage } from './notification-and-language-setting.page';\nimport { SharedModule } from 'src/modules/shared.module';\nimport { TranslateModule, TranslateLoader, TranslateService } from '@ngx-translate/core';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { map } from 'rxjs/operators';\nimport { LanguageService } from 'src/services/language.service';\nimport { HttpClient } from '@angular/common/http';\n\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/noti-and-lang-setting/', '.json');\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    NotificationAndLanguageSettingPageRoutingModule,\n    SharedModule,\n    TranslateModule.forChild({\n      loader: {\n          provide: TranslateLoader,\n          useFactory: createTranslateLoader,\n          deps: [HttpClient]\n      },\n      isolate: true\n    })\n  ],\n  declarations: [NotificationAndLanguageSettingPage],\n})\nexport class NotificationAndLanguageSettingPageModule {\n  language$ = this.languageService.language$;\n    constructor(\n        private translateService: TranslateService,\n        private languageService: LanguageService,\n    ) {\n        this.language$.pipe(map(language => language.lang)).subscribe(lang => this.translateService.use(lang));\n    }\n}\n","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>{{'noti_and_lang_setting' | translate}}</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <!-- <ion-card>\\n    <ion-card-header>\\n      <ion-card-title>{{'notification_setting' | translate}}</ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-list>\\n        <ion-item [routerLink]=\\\"['/notification']\\\">\\n          {{'exercise_schedule_notification' | translate}}\\n          <ion-icon slot=\\\"end\\\" name=\\\"chevron-forward\\\"></ion-icon>\\n        </ion-item>\\n      </ion-list>\\n    </ion-card-content>\\n  </ion-card>-->\\n  <ion-card>\\n    <ion-card-header>\\n      <ion-card-title>{{'language_setting' | translate}}</ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-radio-group [(ngModel)]=\\\"currLang\\\" (ionChange)=\\\"setLanguage()\\\">\\n        <ion-item>\\n          <ion-label>한국어</ion-label>\\n          <ion-radio value=\\\"ko\\\"></ion-radio>\\n        </ion-item>\\n        <ion-item>\\n          <ion-label>English</ion-label>\\n          <ion-radio value=\\\"en\\\"></ion-radio>\\n        </ion-item>\\n        </ion-radio-group>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { NotificationAndLanguageSettingPage } from './notification-and-language-setting.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NotificationAndLanguageSettingPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NotificationAndLanguageSettingPageRoutingModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJub3RpZmljYXRpb24tYW5kLWxhbmd1YWdlLXNldHRpbmcucGFnZS5zY3NzIn0= */\";","import { Router } from '@angular/router';\nimport { LanguageService } from './../../services/language.service';\nimport { StorageService } from './../../services/storage.service';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Component, OnInit } from '@angular/core';\nimport { LANG } from 'src/constants/storage-key';\nimport { LANG_KO } from 'src/constants/common';\n\n@Component({\n  selector: 'app-notification-and-language-setting',\n  templateUrl: './notification-and-language-setting.page.html',\n  styleUrls: ['./notification-and-language-setting.page.scss'],\n})\nexport class NotificationAndLanguageSettingPage implements OnInit {\n  currLang: string;\n  constructor(private languageSvc: LanguageService, private router: Router) { }\n\n  async ngOnInit() {\n    await this.getCurrLang();\n  }\n\n  async getCurrLang() {\n    const settedLang = await this.languageSvc.getLangLastSetting();\n    if (settedLang) {\n      this.currLang = settedLang;\n    } else {\n      this.currLang = LANG_KO;\n    }\n  }\n\n  async setLanguage() {\n    await this.languageSvc.setLang(this.currLang);\n  }\n\n  navToNotification() {\n    this.router.navigate(['./notification']);\n  }\n\n}\n"],"sourceRoot":"webpack:///"}